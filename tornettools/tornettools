#!/usr/bin/env python

'''
  tornettools
  Authored by Rob Jansen, 2019-2020
  See LICENSE for licensing information
'''

import sys
import os
import argparse
import logging

from datetime import datetime
from random import randint
from random import seed as stdseed
from numpy.random import seed as numpyseed
from multiprocessing import cpu_count

from tornettools.util import *
from tornettools._version import __version__

HELP_MAIN = """
Use 'tornettools <subcommand> --help' for more info
"""
DESC_MAIN = """
tornettools is a utility to assist in the generation of private Tor
networks that can run in Shadow. tornettools must be run with a
subcommand to specify a mode of operation.

For more information, see https://github.com/shadow/tornettools.
"""

HELP_STAGE = """
Process Tor metrics data for staging network generation
"""
DESC_STAGE = """
Process Tor network consensuses, relay descriptors, and user files
from Tor metrics to stage TorNet network generation.

This command should be used before running generate. This command
produces staging files that will be required for the generate
command to succeed.
"""

HELP_GENERATE = """
Generate TorNet network configurations
"""
DESC_GENERATE = """
Loads the TorNet staging files produced with the stage command
and uses them to generate a valid TorNet network configuration.
"""

HELP_SIMULATE = """
Run a TorNet simulation in Shadow
"""
DESC_SIMULATE = """
TODO
"""

HELP_PARSE = """
Parse useful data from simulation log files
"""
DESC_PARSE = """
TODO
"""

HELP_PLOT = """
Plot previously parsed data to visualize results
"""
DESC_PLOT = """
TODO
"""

HELP_ARCHIVE = """
Cleanup and compress Shadow simulation data
"""
DESC_ARCHIVE = """
TODO
"""

def __setup_logging_helper(logfilename=None):
    my_handlers = []

    stdout_handler = logging.StreamHandler(sys.stdout)
    my_handlers.append(stdout_handler)

    if logfilename != None:
        file_handler = logging.FileHandler(filename=logfilename)
        my_handlers.append(file_handler)

    logging.basicConfig(
        level=logging.INFO,
        format='%(asctime)s %(created)f [tornettools] [%(levelname)s] %(message)s',
        datefmt='%Y-%m-%d %H:%M:%S',
        handlers=my_handlers,
    )

    msg = "Logging system initialized! Logging events to stdout"
    if logfilename != None:
        msg += " and to '{}'".format(logfilename)
    logging.info(msg)

def __setup_logging(args):
    if args.quiet <= 1:
        logfilename = None
        if args.quiet == 0 and hasattr(args, 'prefix'):
            # log to a file too
            prefixstr = str(args.prefix)
            funcstr = str(args.command) if args.command is not None else "none"
            datestr = datetime.now().strftime("%Y-%m-%d.%H:%M:%S")
            logfilename = "{}/tornettools.{}.{}.log".format(prefixstr, funcstr, datestr)
        __setup_logging_helper(logfilename)
    else:
        pass # no logging

def main():
    # argparse.RawDescriptionHelpFormatter, RawTextHelpFormatter, RawDescriptionHelpFormatter
    my_formatter_class = CustomHelpFormatter

    # construct the options
    main_parser = argparse.ArgumentParser(description=DESC_MAIN, formatter_class=my_formatter_class)

    main_parser.add_argument('-v', '--version',
        help="""Prints the version of the toolkit and exits.""",
        action="store_true", dest="do_version",
        default=False)

    main_parser.add_argument('-q', '--quiet',
        help="""Do not write log messages to file. Use twice to also not write to stdout.""",
        action="count", dest="quiet",
        default=0)

    main_parser.add_argument('-s', '--seed',
        help="""Initialize PRNGs with a seed to allow for deterministic behavior.""",
        action="store", type=int, dest="seed", metavar="N",
        default=None)

    main_parser.add_argument('--extended',
        help="""Enable unstable extended or experimental behavior.""",
        action="store_true", dest="extended",
        default=False)

    sub_parser = main_parser.add_subparsers(help=HELP_MAIN, dest='command')

    #########
    # stage #
    #########
    stage_parser = sub_parser.add_parser('stage',
        description=DESC_STAGE,
        help=HELP_STAGE,
        formatter_class=my_formatter_class)
    stage_parser.set_defaults(func=stage, formatter_class=my_formatter_class)

    stage_parser.add_argument('consensus_path',
        help="Path to a directory containing multiple consensus files",
        type=type_str_path_in)

    stage_parser.add_argument("server_descriptor_path",
        help="Path to a directory containing multiple server descriptor files",
        type=type_str_path_in)

    stage_parser.add_argument("user_stats_path",
        help="Path to a Tor user stats file (https://metrics.torproject.org/userstats-relay-country.csv)",
        type=type_str_path_in)

    stage_parser.add_argument("torperf_data_path",
        help="Path to a directory of torperf performance data",
        type=type_str_path_in)

    stage_parser.add_argument('--prefix',
        help="""A directory PATH prefix where the processed data
            files generated by this script will be written""",
        metavar="PATH", type=type_str_dir_path_out,
        action="store", dest="prefix",
        default=os.getcwd())

    stage_parser.add_argument('-m', '--multiproc',
        help="""Enable multiprocessing with N worker processes, which may be '0'
            to use the number of available processor cores (use '1' to disable)""",
        metavar="N", type=type_nonnegative_integer,
        action="store", dest="nprocesses",
        default=0)

    stage_parser.add_argument('-g', '--geoip_path',
        help="""A file PATH to an existing geoip file (usually in tor/src/config/geoip)""",
        metavar="PATH", type=type_str_path_in,
        action="store", dest="geoip_path",
        default=None)

    stage_parser.add_argument('-c', '--compress',
        help="""Compress output with xz.""",
        action="store_true", dest="do_compress",
        default=False)

    ############
    # generate #
    ############
    generate_parser = sub_parser.add_parser('generate',
        description=DESC_GENERATE,
        help=HELP_GENERATE,
        formatter_class=my_formatter_class)
    generate_parser.set_defaults(func=generate, formatter_class=my_formatter_class)

    generate_parser.add_argument('relay_info_path',
        help="Path to a relay-info-staging.json file produced with the 'stage' command",
        type=type_str_path_in)

    generate_parser.add_argument("user_info_path",
        help="Path to a user-info-staging.json file produced with the 'stage' command",
        type=type_str_path_in)

    generate_parser.add_argument("tmodel_git_path",
        help="Path to a local directory that contains a git clone of the repo: \
            'https://github.com/tmodel-ccs2018/tmodel-ccs2018.github.io.git'",
        type=type_str_path_in)

    generate_parser.add_argument('--prefix',
        help="""A directory PATH prefix where the tornet network configuration
            files generated by this script will be written""",
        metavar="PATH", type=type_str_dir_path_out,
        action="store", dest="prefix",
        default=f"{os.getcwd()}/tornet")

    generate_parser.add_argument('-m', '--multiproc',
        help="""Enable multiprocessing with N worker processes, which may be '0'
            to use the number of available processor cores (use '1' to disable)""",
        metavar="N", type=type_nonnegative_integer,
        action="store", dest="nprocesses",
        default=0)

    generate_parser.add_argument('-n', '--network_scale',
        help="""A fractional number representing the scale of the Shadow Tor network that we
            generate relative to a full Tor network. E.g., a value of 0.1 will generate a private
            Tor network with about 1/10 of the relays and 1/10 of the traffic load of public
            Tor.""",
        metavar="N", type=type_fractional_float,
        action="store", dest="network_scale",
        default=0.1)

    generate_parser.add_argument('-p', '--process_scale',
        help="""A fractional number representing the ratio of the number of TGen and Tor client
            processes to the number of Tor users that we emulate. E.g., a value of 0.01 means each
            TGen client process will generate the background traffic of 1/0.01=100 Tor users. This
            setting helps us run larger scale Shadow experiments because it requires Shadow to run
            fewer Tor processes during the simulation.""",
        metavar="N", type=type_fractional_float,
        action="store", dest="process_scale",
        default=0.01)

    generate_parser.add_argument('-s', '--server_scale',
        help="""A fractional number representing the ratio of the number of TGen servers to the
            number of TGen clients that we run. E.g., a value of 0.1 means that we will run 1
            TGen server for every 1/0.1=10 TGen clients.""",
        metavar="N", type=type_fractional_float,
        action="store", dest="server_scale",
        default=0.1)

    generate_parser.add_argument('-t', '--torperf_scale',
        help="""A fractional number representing the ratio of the number of Perf clients to the
            number of Tor clients that we emulate. E.g., a value of 0.001 means that we will run
            1 Perf client for every 1/0.001=1000 Tor clients. Perf clients help us benchmark Tor
            performance during an experiment and validate against Tor metrics.""",
        metavar="N", type=type_fractional_float,
        action="store", dest="torperf_scale",
        default=0.001)

    generate_parser.add_argument('-l', '--load_scale',
        help="""A float number by which we scale the number of circuit flows created by each TGen
        client relative to the 'normal' number of flows a client should create. E.g., a value of 2.0
        means that each client will generate twice as many circuit flows than it normally should,
        while a value of 0.5 means it will generate half as many. This setting allows us to increase
        or decrease the client traffic load to adjust the overall bandwidth utilization rates of
        relays in the generated network.""",
        metavar="N", type=float,
        action="store", dest="load_scale",
        default=1.0)

    generate_parser.add_argument('-a', '--atlas',
        help="""The path to a decompressed version of the atlas topology file that Shadow should
            use to construct its network. Use this option to avoid storing duplicate atlas files;
            if this option is unspecified, then we will copy the atlas from the tmodel_git_path repo
            into the config directory that we generate.
            (A compressed version of the file is normally available at
            'tmodel_git_path/data/shadow/network/atlas.201801.shadow113.graphml.xml.xz'.)""",
        metavar="PATH", type=type_str_path_in,
        action="store", dest="atlas_path",
        default=None)

    generate_parser.add_argument('-e', '--events',
        help="""Run oniontrace on each Tor node to log the given Tor control events (should be
            specified as a CSV string) throughout the simulation. Set to 'None' to disable.""",
        metavar="CSV", type=str,
        action="store", dest="events_csv",
        default="BW,CIRC")

    generate_parser.add_argument('-r', '--record',
        help="""Run oniontrace on each Tor node to record circuit building and stream assignment
            info throughout the simulation.""",
        action="store_true", dest="do_trace",
        default=False)

    generate_parser.add_argument('--tor',
        help="""Path to a compiled 'tor' executable, used to generate relay fingerprints.""",
        metavar="PATH", type=type_str_path_in,
        action="store", dest="torexe",
        default=which("tor"))

    generate_parser.add_argument('--torgencert',
        help="""Path to a compiled 'tor-gencert' executable, used to generate relay keys.""",
        metavar="PATH", type=type_str_path_in,
        action="store", dest="torgencertexe",
        default=which("tor-gencert"))

    if '--extended' in sys.argv:
        ############
        # simulate #
        ############
        simulate_parser = sub_parser.add_parser('simulate',
            description=DESC_SIMULATE,
            help=HELP_SIMULATE,
            formatter_class=my_formatter_class)
        simulate_parser.set_defaults(func=simulate, formatter_class=my_formatter_class)

        simulate_parser.add_argument('tornet_config_path',
            help="Path to a tornet configuration directory produced with the 'generate' command",
            type=type_str_path_in)

        simulate_parser.add_argument('-a', '--args',
            help="""The argument string to pass to Shadow when running the simulation.""",
            type=str,
            action="store", dest="shadow_args",
            default="--workers={}".format(cpu_count()))

        simulate_parser.add_argument('-c', '--compress',
            help="""Compress output with lzma.""",
            action="store_true", dest="do_compress",
            default=False)

        #########
        # parse #
        #########
        parse_parser = sub_parser.add_parser('parse',
            description=DESC_PARSE,
            help=HELP_PARSE,
            formatter_class=my_formatter_class)
        parse_parser.set_defaults(func=parse, formatter_class=my_formatter_class)

        parse_parser.add_argument('tornet_config_path',
            help="Path to a tornet configuration directory after running the 'simulate' command",
            type=type_str_path_in)

        parse_parser.add_argument('-m', '--multiproc',
            help="""Enable multiprocessing with N worker processes, which may be '0'
                to use the number of available processor cores (use '1' to disable)""",
            metavar="N", type=type_nonnegative_integer,
            action="store", dest="nprocesses",
            default=0)

        ########
        # plot #
        ########
        plot_parser = sub_parser.add_parser('plot',
            description=DESC_PLOT,
            help=HELP_PLOT,
            formatter_class=my_formatter_class)
        plot_parser.set_defaults(func=plot, formatter_class=my_formatter_class)

        plot_parser.add_argument('tornet_config_path',
            help="Path to a tornet configuration directory after running the 'parse' command",
            type=type_str_path_in)

        ###########
        # archive #
        ###########
        archive_parser = sub_parser.add_parser('archive',
            description=DESC_ARCHIVE,
            help=HELP_ARCHIVE,
            formatter_class=my_formatter_class)
        archive_parser.set_defaults(func=archive, formatter_class=my_formatter_class)

        archive_parser.add_argument('tornet_config_path',
            help="Path to a tornet configuration directory after running the 'plot' command",
            type=type_str_path_in)

        archive_parser.add_argument('-m', '--multiproc',
            help="""Enable multiprocessing with N worker processes, which may be '0'
                to use the number of available processor cores (use '1' to disable)""",
            metavar="N", type=type_nonnegative_integer,
            action="store", dest="nprocesses",
            default=0)

    # get args and call the command handler for the chosen mode
    args = main_parser.parse_args()

    if not hasattr(args, "prefix") and hasattr(args, "tornet_config_path"):
        args.prefix = args.tornet_config_path
    if hasattr(args, "nprocesses"):
        args.nprocesses = args.nprocesses if args.nprocesses > 0 else cpu_count()

    # check if it's just a version check and we should short circuit
    if args.do_version:
        __setup_logging(args)
        logging.info("tornettools version {}".format(__version__))
        return

    # if it's anything other than version, we need a subcommand
    if args.command == None:
        main_parser.print_usage()
        return

    # now we know we can start
    __setup_logging(args)

    # seed the pseudo-random generators
    # if we don't have a seed, choose one and make sure we log it for reproducibility
    if args.seed == None:
        args.seed = randint(0, 2**31)
    stdseed(args.seed)
    numpyseed(args.seed)
    logging.info("Seeded standard and numpy PRNGs with seed={}".format(args.seed))

    logging.info("The argument namespace is: {}".format(str(args)))

    # now run the configured mode
    args.func(args)

def stage(args):
    from tornettools import stage
    stage.run(args)
    from tornettools import parse_torperf
    parse_torperf.run(args)

def generate(args):
    if args.events_csv.lower() == "none":
        args.events_csv = None
    from tornettools import generate
    generate.run(args)

def simulate(args):
    from tornettools import simulate
    simulate.run(args)

def parse(args):
    from tornettools import parse
    parse.run(args)

def plot(args):
    from tornettools import plot
    plot.run(args)

def archive(args):
    from tornettools import archive
    archive.run(args)

# adds the 'RawDescriptionHelpFormatter' to the ArgsDefault one
class CustomHelpFormatter(argparse.ArgumentDefaultsHelpFormatter):
    def _fill_text(self, text, width, indent):
        return ''.join([indent + line for line in text.splitlines(True)])

# a custom action for passing in experimental data directories when plotting
class PathStringArgsAction(argparse.Action):
    def __call__(self, parser, namespace, values, option_string=None):
        # extract the path to our data, and the label for the legend
        p = os.path.abspath(os.path.expanduser(values[0]))
        s = values[1]
        # check the path exists
        if not os.path.exists(p): raise argparse.ArgumentError(self, "The supplied path does not exist: '{0}'".format(p))
        # remove the default
        if "_didremovedefault" not in namespace:
            setattr(namespace, self.dest, [])
            setattr(namespace, "_didremovedefault", True)
        # append out new experiment path
        dest = getattr(namespace, self.dest)
        dest.append((p, s))

if __name__ == '__main__':
    sys.exit(main())
